name: backend-pipeline

on:
  push:
    branches:
      - main
    # paths:
    #   - '/**'
    paths-ignore:
      - 'k8s/backend-deployment.yaml'

jobs:
  build-backend:
    runs-on: ubuntu-latest
    environment: actions
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create application.yml directory
        run: mkdir -p ./src/main/resources

      - name: Copy config file
        env:
          APPLICATION_YML_BASE64: ${{ secrets.APPLICATION_YML_BASE64 }}
        run: |
          echo "$APPLICATION_YML_BASE64" | base64 -d > ./src/main/resources/application.yml
      - name: Build Backend
        run: |
          chmod +x gradlew
          ./gradlew build
          ls ./build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: be08-fin-200OK-CONCENTRIC-backend-0.0.1-SNAPSHOT
          path: ./build/libs/*.jar

  docker-build-push:
    runs-on: ubuntu-latest
    environment: actions
    needs: build-backend
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: be08-fin-200OK-CONCENTRIC-backend-0.0.1-SNAPSHOT
          path: ./build/libs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Build and push Docker image
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          IMAGE_TAG="1.${{ github.run_number }}"
          ECR_URI="${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG}"
          docker build -t $ECR_URI .
          docker push $ECR_URI
          
  update-deployment-file:
    runs-on: ubuntu-latest
    environment: actions
    needs: docker-build-push
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Update deployment.yaml
        env:
          IMAGE_TAG: "1.${{ github.run_number }}"
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          sed -i "s|image:.*|image: {{$ECR_REPOSITORY}}:$IMAGE_TAG|g" k8s/backend-deployment.yaml
          cat k8s/backend-deployment.yaml  # 변경 내용 확인
          
      - name: Set up SSH for git push
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Commit & Push changes
        env:
          GIT_USER: "henhen7"
          GIT_EMAIL: "eatho@naver.com"
        run: |
          git config user.name "$GIT_USER"
          git config user.email "$GIT_EMAIL"
          git add k8s/backend-deployment.yaml
          git commit -m "Update Image Version to $IMAGE_TAG"
          git push git@github.com:beyond-sw-camp/be08-fin-200OK-CONCENTRIC-backend.git main
          
      - name: Check if deployment.yaml changed
        id: check_backend_deployment_change
        run: |
          # 변경 사항이 있는지 확인
          if git diff --name-only HEAD~1 | grep -q "k8s/backend-deployment.yaml"; then
            echo "backend_deployment_changed=true" >> $GITHUB_ENV
          else
            echo "backend_deployment_changed=false" >> $GITHUB_ENV
          fi
          
  deploy-backend:
    runs-on: ubuntu-latest
    environment: actions
    needs: update-deployment-file
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v3

      - name: Decode and save EC2 private key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY_BASE64 }}" | base64 -d > ~/ec2-private-key.pem
          chmod 600 ~/ec2-private-key.pem

      - name: Deploy using kubectl
        env:
          IMAGE_TAG: "1.${{ github.run_number }}"
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          ssh -o "StrictHostKeyChecking=no" -i ~/ec2-private-key.pem ec2-user@ec2-43-203-211-122.ap-northeast-2.compute.amazonaws.com << 'EOF'
          export ECR_REPOSITORY="${ECR_REPOSITORY}"
          export IMAGE_TAG="${IMAGE_TAG}"
          echo "ECR_REPOSITORY: ${ECR_REPOSITORY}"
          echo "IMAGE_TAG: ${IMAGE_TAG}"
          kubectl set image deployment backend-deployment backend=$ECR_REPOSITORY:$IMAGE_TAG -n concentric
          EOF

  notify-discord:
    runs-on: ubuntu-latest
    needs: [build-backend, docker-build-push, update-deployment-file, deploy-backend]
    if: always()
    steps:
      - name: Send notification to Discord
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
            -d '{"content":"**CI/CD Pipeline Success**\n'\
                  'Build Number: '${{ github.run_number }}\'}' \
